/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MerkleDropInterface extends ethers.utils.Interface {
  functions: {
    "addFunder(address)": FunctionFragment;
    "claimTranche(address,uint256,uint256,bytes32[])": FunctionFragment;
    "claimTranches(address,uint256[],uint256[],bytes32[][])": FunctionFragment;
    "expireTranche(uint256)": FunctionFragment;
    "funders(address)": FunctionFragment;
    "hasClaimed(address,uint256)": FunctionFragment;
    "merkleRoots(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeFunder(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "seedNewAllocations(bytes32,uint256,string)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyClaim(address,uint256,uint256,bytes32[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addFunder", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimTranche",
    values: [string, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTranches",
    values: [string, BigNumberish[], BigNumberish[], BytesLike[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "expireTranche",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "funders", values: [string]): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFunder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seedNewAllocations",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyClaim",
    values: [string, BigNumberish, BigNumberish, BytesLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "addFunder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTranche",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTranches",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expireTranche",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "funders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "merkleRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFunder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seedNewAllocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyClaim",
    data: BytesLike
  ): Result;

  events: {
    "Claimed(address,uint256,uint256)": EventFragment;
    "FunderAdded(address)": EventFragment;
    "FunderRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TrancheAdded(uint256,bytes32,uint256,string)": EventFragment;
    "TrancheExpired(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FunderAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FunderRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrancheAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrancheExpired"): EventFragment;
}

export type ClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    claimant: string;
    tranche: BigNumber;
    balance: BigNumber;
  }
>;

export type FunderAddedEvent = TypedEvent<[string] & { _address: string }>;

export type FunderRemovedEvent = TypedEvent<[string] & { _address: string }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TrancheAddedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string] & {
    tranche: BigNumber;
    merkleRoot: string;
    totalAmount: BigNumber;
    uri: string;
  }
>;

export type TrancheExpiredEvent = TypedEvent<
  [BigNumber] & { tranche: BigNumber }
>;

export class MerkleDrop extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MerkleDropInterface;

  functions: {
    addFunder(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addFunder(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTranche(
      _claimer: string,
      _tranche: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimTranche(address,uint256,uint256,bytes32[])"(
      _claimer: string,
      _tranche: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTranches(
      _claimer: string,
      _ids: BigNumberish[],
      _balances: BigNumberish[],
      _merkleProofs: BytesLike[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimTranches(address,uint256[],uint256[],bytes32[][])"(
      _claimer: string,
      _ids: BigNumberish[],
      _balances: BigNumberish[],
      _merkleProofs: BytesLike[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expireTranche(
      _trancheId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "expireTranche(uint256)"(
      _trancheId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    funders(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "funders(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasClaimed(
      _user: string,
      _tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasClaimed(address,uint256)"(
      _user: string,
      _tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    merkleRoots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "merkleRoots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeFunder(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeFunder(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    seedNewAllocations(
      _merkleRoot: BytesLike,
      _totalAllocation: BigNumberish,
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "seedNewAllocations(bytes32,uint256,string)"(
      _merkleRoot: BytesLike,
      _totalAllocation: BigNumberish,
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyClaim(
      _claimer: string,
      _tranche: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean] & { valid: boolean }>;

    "verifyClaim(address,uint256,uint256,bytes32[])"(
      _claimer: string,
      _tranche: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean] & { valid: boolean }>;
  };

  addFunder(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addFunder(address)"(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTranche(
    _claimer: string,
    _tranche: BigNumberish,
    _balance: BigNumberish,
    _merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimTranche(address,uint256,uint256,bytes32[])"(
    _claimer: string,
    _tranche: BigNumberish,
    _balance: BigNumberish,
    _merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTranches(
    _claimer: string,
    _ids: BigNumberish[],
    _balances: BigNumberish[],
    _merkleProofs: BytesLike[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimTranches(address,uint256[],uint256[],bytes32[][])"(
    _claimer: string,
    _ids: BigNumberish[],
    _balances: BigNumberish[],
    _merkleProofs: BytesLike[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expireTranche(
    _trancheId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "expireTranche(uint256)"(
    _trancheId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  funders(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "funders(address)"(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  hasClaimed(
    _user: string,
    _tranche: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasClaimed(address,uint256)"(
    _user: string,
    _tranche: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  merkleRoots(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "merkleRoots(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeFunder(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeFunder(address)"(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  seedNewAllocations(
    _merkleRoot: BytesLike,
    _totalAllocation: BigNumberish,
    _uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "seedNewAllocations(bytes32,uint256,string)"(
    _merkleRoot: BytesLike,
    _totalAllocation: BigNumberish,
    _uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyClaim(
    _claimer: string,
    _tranche: BigNumberish,
    _balance: BigNumberish,
    _merkleProof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifyClaim(address,uint256,uint256,bytes32[])"(
    _claimer: string,
    _tranche: BigNumberish,
    _balance: BigNumberish,
    _merkleProof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addFunder(_address: string, overrides?: CallOverrides): Promise<void>;

    "addFunder(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimTranche(
      _claimer: string,
      _tranche: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimTranche(address,uint256,uint256,bytes32[])"(
      _claimer: string,
      _tranche: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimTranches(
      _claimer: string,
      _ids: BigNumberish[],
      _balances: BigNumberish[],
      _merkleProofs: BytesLike[][],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimTranches(address,uint256[],uint256[],bytes32[][])"(
      _claimer: string,
      _ids: BigNumberish[],
      _balances: BigNumberish[],
      _merkleProofs: BytesLike[][],
      overrides?: CallOverrides
    ): Promise<void>;

    expireTranche(
      _trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "expireTranche(uint256)"(
      _trancheId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    funders(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "funders(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasClaimed(
      _user: string,
      _tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasClaimed(address,uint256)"(
      _user: string,
      _tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    merkleRoots(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "merkleRoots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeFunder(_address: string, overrides?: CallOverrides): Promise<void>;

    "removeFunder(address)"(
      _address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    seedNewAllocations(
      _merkleRoot: BytesLike,
      _totalAllocation: BigNumberish,
      _uri: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "seedNewAllocations(bytes32,uint256,string)"(
      _merkleRoot: BytesLike,
      _totalAllocation: BigNumberish,
      _uri: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyClaim(
      _claimer: string,
      _tranche: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifyClaim(address,uint256,uint256,bytes32[])"(
      _claimer: string,
      _tranche: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Claimed(address,uint256,uint256)"(
      claimant?: null,
      tranche?: null,
      balance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { claimant: string; tranche: BigNumber; balance: BigNumber }
    >;

    Claimed(
      claimant?: null,
      tranche?: null,
      balance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { claimant: string; tranche: BigNumber; balance: BigNumber }
    >;

    "FunderAdded(address)"(
      _address?: string | null
    ): TypedEventFilter<[string], { _address: string }>;

    FunderAdded(
      _address?: string | null
    ): TypedEventFilter<[string], { _address: string }>;

    "FunderRemoved(address)"(
      _address?: string | null
    ): TypedEventFilter<[string], { _address: string }>;

    FunderRemoved(
      _address?: string | null
    ): TypedEventFilter<[string], { _address: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "TrancheAdded(uint256,bytes32,uint256,string)"(
      tranche?: null,
      merkleRoot?: null,
      totalAmount?: null,
      uri?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string],
      {
        tranche: BigNumber;
        merkleRoot: string;
        totalAmount: BigNumber;
        uri: string;
      }
    >;

    TrancheAdded(
      tranche?: null,
      merkleRoot?: null,
      totalAmount?: null,
      uri?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string],
      {
        tranche: BigNumber;
        merkleRoot: string;
        totalAmount: BigNumber;
        uri: string;
      }
    >;

    "TrancheExpired(uint256)"(
      tranche?: null
    ): TypedEventFilter<[BigNumber], { tranche: BigNumber }>;

    TrancheExpired(
      tranche?: null
    ): TypedEventFilter<[BigNumber], { tranche: BigNumber }>;
  };

  estimateGas: {
    addFunder(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addFunder(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTranche(
      _claimer: string,
      _tranche: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimTranche(address,uint256,uint256,bytes32[])"(
      _claimer: string,
      _tranche: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTranches(
      _claimer: string,
      _ids: BigNumberish[],
      _balances: BigNumberish[],
      _merkleProofs: BytesLike[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimTranches(address,uint256[],uint256[],bytes32[][])"(
      _claimer: string,
      _ids: BigNumberish[],
      _balances: BigNumberish[],
      _merkleProofs: BytesLike[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expireTranche(
      _trancheId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "expireTranche(uint256)"(
      _trancheId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    funders(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "funders(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasClaimed(
      _user: string,
      _tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasClaimed(address,uint256)"(
      _user: string,
      _tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRoots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "merkleRoots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeFunder(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeFunder(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    seedNewAllocations(
      _merkleRoot: BytesLike,
      _totalAllocation: BigNumberish,
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "seedNewAllocations(bytes32,uint256,string)"(
      _merkleRoot: BytesLike,
      _totalAllocation: BigNumberish,
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyClaim(
      _claimer: string,
      _tranche: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyClaim(address,uint256,uint256,bytes32[])"(
      _claimer: string,
      _tranche: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addFunder(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addFunder(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTranche(
      _claimer: string,
      _tranche: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimTranche(address,uint256,uint256,bytes32[])"(
      _claimer: string,
      _tranche: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTranches(
      _claimer: string,
      _ids: BigNumberish[],
      _balances: BigNumberish[],
      _merkleProofs: BytesLike[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimTranches(address,uint256[],uint256[],bytes32[][])"(
      _claimer: string,
      _ids: BigNumberish[],
      _balances: BigNumberish[],
      _merkleProofs: BytesLike[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expireTranche(
      _trancheId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "expireTranche(uint256)"(
      _trancheId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    funders(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "funders(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasClaimed(
      _user: string,
      _tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasClaimed(address,uint256)"(
      _user: string,
      _tranche: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleRoots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "merkleRoots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFunder(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeFunder(address)"(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    seedNewAllocations(
      _merkleRoot: BytesLike,
      _totalAllocation: BigNumberish,
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "seedNewAllocations(bytes32,uint256,string)"(
      _merkleRoot: BytesLike,
      _totalAllocation: BigNumberish,
      _uri: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyClaim(
      _claimer: string,
      _tranche: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyClaim(address,uint256,uint256,bytes32[])"(
      _claimer: string,
      _tranche: BigNumberish,
      _balance: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
